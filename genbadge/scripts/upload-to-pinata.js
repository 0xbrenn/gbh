// scripts/upload-to-pinata.js
// Script to upload your NFT badge to Pinata IPFS using JWT authentication

import axios from 'axios';
import FormData from 'form-data';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get your Pinata JWT from https://app.pinata.cloud/developers/api-keys
const PINATA_JWT = process.env.PINATA_JWT;

if (!PINATA_JWT) {
  console.error('‚ö†Ô∏è  Please add PINATA_JWT to your .env file');
  console.log('\nGet your JWT from: https://app.pinata.cloud/developers/api-keys');
  console.log('Make sure to select "Admin" permissions when creating the key\n');
  process.exit(1);
}

async function uploadToPinata() {
  try {
    console.log('üöÄ Starting Pinata upload process...\n');

    // Step 1: Upload the badge image
    console.log('üì§ Uploading badge image to Pinata...');
    
    const imageData = new FormData();
    const imageFile = fs.createReadStream(
  path.join(__dirname, '../src/assets/badge-nft.png')
);
    imageData.append('file', imageFile);
    
    // Optional: Add metadata to the image pin
    const imageMetadata = JSON.stringify({
      name: 'Genesis n-Badge-Image',
      keyvalues: {
        project: 'OPN Chain',
        type: 'badge-image'
      }
    });
    imageData.append('pinataMetadata', imageMetadata);
    
    // Optional: Pin options
    const imageOptions = JSON.stringify({
      cidVersion: 0
    });
    imageData.append('pinataOptions', imageOptions);
    
    // Upload image to Pinata using JWT
    const imageResponse = await axios.post(
      'https://api.pinata.cloud/pinning/pinFileToIPFS',
      imageData,
      {
        maxBodyLength: 'Infinity',
        headers: {
          'Content-Type': `multipart/form-data; boundary=${imageData._boundary}`,
          'Authorization': `Bearer ${PINATA_JWT}`
        }
      }
    );
    
    const imageHash = imageResponse.data.IpfsHash;
    const imageUrl = `ipfs://${imageHash}`;
    console.log('‚úÖ Image uploaded successfully!');
    console.log(`   IPFS Hash: ${imageHash}`);
    console.log(`   IPFS URL: ${imageUrl}`);
    console.log(`   Gateway URL: https://gateway.pinata.cloud/ipfs/${imageHash}`);
    console.log(`   Alt Gateway: https://ipfs.io/ipfs/${imageHash}\n`);
    
    // Step 2: Create and upload metadata JSON
    console.log('üìù Creating metadata JSON...');
    
    const metadata = {
      name: "Genesis n-Badge",
      description: "Exclusive Genesis n-Badge for early OPN Chain supporters. This soulbound token represents your status as an original member of the OPN community.",
      image: imageUrl,
      external_url: "https://chain.iopn.io",
      attributes: [
        {
          trait_type: "Type",
          value: "n-Badge"
        },
        {
          trait_type: "Collection",
          value: "Genesis n-Badge"
        },
        {
          trait_type: "Rarity",
          value: "Legendary"
        },
      ]
    };
    
    // Upload metadata to Pinata
    console.log('üì§ Uploading metadata to Pinata...');
    
    const metadataResponse = await axios.post(
      'https://api.pinata.cloud/pinning/pinJSONToIPFS',
      metadata,
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${PINATA_JWT}`
        }
      }
    );
    
    const metadataHash = metadataResponse.data.IpfsHash;
    const metadataUrl = `ipfs://${metadataHash}`;
    
    console.log('‚úÖ Metadata uploaded successfully!');
    console.log(`   IPFS Hash: ${metadataHash}`);
    console.log(`   IPFS URL: ${metadataUrl}`);
    console.log(`   Gateway URL: https://gateway.pinata.cloud/ipfs/${metadataHash}`);
    console.log(`   Alt Gateway: https://ipfs.io/ipfs/${metadataHash}\n`);
    
    // Step 3: Save to .env file
    console.log('üíæ Updating .env file with URIs...');
    
    // Read existing .env content
    let envContent = '';
    if (fs.existsSync('.env')) {
      envContent = fs.readFileSync('.env', 'utf8');
    }
    
    // Remove old NFT URI entries if they exist
    envContent = envContent.replace(/^VITE_NFT_.*$/gm, '');
    envContent = envContent.replace(/\n{3,}/g, '\n\n'); // Clean up extra newlines
    
    // Add new URIs
    const newEnvContent = `
# NFT Metadata URIs (Generated by Pinata upload script)
VITE_NFT_METADATA_URI=${metadataUrl}
VITE_NFT_IMAGE_URI=${imageUrl}
VITE_NFT_METADATA_GATEWAY=https://gateway.pinata.cloud/ipfs/${metadataHash}
VITE_NFT_IMAGE_GATEWAY=https://gateway.pinata.cloud/ipfs/${imageHash}
`;
    
    // Write updated content
    fs.writeFileSync('.env', envContent + newEnvContent);
    console.log('‚úÖ URIs saved to .env file\n');
    
    // Step 4: Display deployment instructions
    console.log('=====================================');
    console.log('üéâ UPLOAD COMPLETE!');
    console.log('=====================================\n');
    
    console.log('üìã METADATA URI FOR CONTRACT DEPLOYMENT:');
    console.log(`   ${metadataUrl}\n`);
    
    console.log('üöÄ HOW TO DEPLOY/UPDATE YOUR CONTRACT:\n');
    
    console.log('Option 1 - Deploy new contract via Remix:');
    console.log(`   Constructor parameter: "${metadataUrl}"\n`);
    
    console.log('Option 2 - Deploy via Hardhat:');
    console.log(`   const ogBadge = await OGBadge.deploy("${metadataUrl}");\n`);
    
    console.log('Option 3 - Update existing contract:');
    console.log(`   await contract.setBadgeURI("${metadataUrl}");\n`);
    
    console.log('=====================================');
    console.log('üîç VERIFY YOUR NFT:');
    console.log('=====================================\n');
    console.log('View Metadata JSON:');
    console.log(`   https://gateway.pinata.cloud/ipfs/${metadataHash}`);
    console.log(`   https://ipfs.io/ipfs/${metadataHash}\n`);
    
    console.log('View Image:');
    console.log(`   https://gateway.pinata.cloud/ipfs/${imageHash}`);
    console.log(`   https://ipfs.io/ipfs/${imageHash}\n`);
    
    console.log('üì± The NFT will appear in wallets like:');
    console.log('   ‚Ä¢ MetaMask (NFTs tab)');
    console.log('   ‚Ä¢ Rainbow Wallet');
    console.log('   ‚Ä¢ OpenSea');
    console.log('   ‚Ä¢ Any wallet that supports ERC-721\n');
    
    console.log('üí° TIP: If the NFT doesn\'t show in MetaMask:');
    console.log('   1. Go to NFTs tab');
    console.log('   2. Click "Import NFT"');
    console.log('   3. Enter contract address and your token ID\n');
    
    return {
      metadataUrl,
      imageUrl,
      metadataHash,
      imageHash
    };
    
  } catch (error) {
    console.error('‚ùå Error uploading to Pinata:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('\n‚ö†Ô∏è  Authentication failed. Please check your JWT token.');
      console.log('Make sure your JWT has "pinFileToIPFS" permission.');
    } else if (error.response?.status === 400) {
      console.log('\n‚ö†Ô∏è  Bad request. Check if the file exists at: src/assets/badge.png');
    }
    
    process.exit(1);
  }
}

// Test Pinata connection
async function testPinataConnection() {
  try {
    console.log('üîç Testing Pinata connection...');
    const response = await axios.get(
      'https://api.pinata.cloud/data/testAuthentication',
      {
        headers: {
          'Authorization': `Bearer ${PINATA_JWT}`
        }
      }
    );
    console.log('‚úÖ Pinata connection successful!\n');
    return true;
  } catch (error) {
    console.error('‚ùå Failed to connect to Pinata:', error.response?.data?.message || error.message);
    console.log('\n‚ö†Ô∏è  Please check your PINATA_JWT token in .env');
    return false;
  }
}

// Main execution
async function main() {
  // First test the connection
  const connected = await testPinataConnection();
  if (!connected) {
    process.exit(1);
  }
  
  // Then upload
  await uploadToPinata();
}

// Run the script
main();